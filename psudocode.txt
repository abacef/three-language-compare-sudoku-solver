printBoard():
    for i from 0 to 8:
        print a line
        for j from 0 to 8:
            print the number in that cell followed by a space


copyBoard():
    initialize a 2d array of 9 by 9
    for each row
        copy the current row to the new row


checkSquare():
    store the row and the column of the current cell's top left 3x3 square
    go through each box to see if any have the current box's number in it
    if any of these are true, return false. else return true


isValid():
    store the number of what is in the current box: num
    for i from 0 to 8:
        if i does not equal the current column and the number at [current
                                                     row][i] equals num
            return false
        if i does not equal the current row ans the number at [i][current
                                                     column] equals num
            return false
    return the result of calling checkSquare


deadvance():
    if col is zero:
        if row is not zero
            col = 8
            decrement row
    else
        decrement col
    if not (col is zero and row is zero)
        if the very first configuration has a number other than a zero in it
            call deadvance

advance():
    if col is 8
        col = 0
        increment row
    else
        increment col
    if row is not 9 and col is not 0
        if the very first configuration has a number other than a zero in it
            call advance


backtrack(2D_array, start_time):
    call advance
    if the pointer has advanced past the last square
        return the current time
    else
        for each number from 1 to 9
            put the number in the pointed to spot
            if calling isValid on the configuration returns true
                store the result of call backtrack on the current configuration
                if the result is not zero
                    return it
        set the current square back to zero
        call deadvance
    return zero
				

main():
    initialize a milisecond counter variable to zero

    populate nine arrays of nine numbers from an easy sudoku puzzle
    set row, column, board, and board copy variables
    start a timer
    call backtrack with the 2D array and the start time as parameters
    stop the timer
    print the returned difference in miliseconds and add it to the count

    populate nine arrays of nine numbers from a medium sudoku puzzle
    set row, column, board, and board copy variables
    start a timer
    call backtrack with the 2D array and the start time as parameters
    stop the timer
    print the returned difference in miliseconds and add it to the count

    populate nine arrays of nine numbers from a hard sudoku puzzle
    set row, column, board, and board copy variables
    start a timer
    call backtrack with the 2D array and the start time as parameters
    print the returned difference in miliseconds and add it to the count

    populate nine arrays of nine numbers from an expert sudoku puzzle
    set row, column, board, and board copy variables
    start a timer
    call backtrack with the 2D array and the start time as parameters
    stop the timer
    print the returned difference in miliseconds and add it to the count

    print the value of the milisecond counter
